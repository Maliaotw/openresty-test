worker_processes  auto;
error_log logs/error.log info; # 日誌級別
pid ./nginx.pid;
events {
    worker_connections 1024;
}
http {

    # lua_package_path "/Users/maliao/lua-resty-logger-sockett/lib/?.lua;;";
    lua_package_path '$prefix/lua/?.lua;;';
    
    upstream md5_server{
            server 127.0.0.1:91;        # ①
            keepalive 20;               # ②
    }

    server {
        access_log logs/access.log;
        listen 6699;
        location / {
            default_type text/html;
            content_by_lua_block {
                ngx.say("<p>hello, world</p>")
            }
        }

        location = /sum {
            internal;
            content_by_lua_block {
                ngx.sleep(0.1)
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) + tonumber(args.b))
            }
        }

        location = /subduction {
            internal;
            content_by_lua_block {
                ngx.sleep(0.1)
                local args = ngx.req.get_uri_args()
                ngx.print(tonumber(args.a) - tonumber(args.b))
            }
        }

        location = /app/test_parallels {
            content_by_lua_block {
                local start_time = ngx.now()
                local res1, res2 = ngx.location.capture_multi( {
                                {"/sum", {args={a=3, b=8}}},
                                {"/subduction", {args={a=3, b=8}}}
                            })
                ngx.say("status:", res1.status, " response:", res1.body)
                ngx.say("status:", res2.status, " response:", res2.body)
                ngx.say("time used:", ngx.now() - start_time)
            }
        }

        location = /app/test_queue {
            content_by_lua_block {
                local start_time = ngx.now()
                local res1 = ngx.location.capture_multi( {
                                {"/sum", {args={a=3, b=8}}}
                            })
                local res2 = ngx.location.capture_multi( {
                                {"/subduction", {args={a=3, b=8}}}
                            })
                ngx.say("status:", res1.status, " response:", res1.body)
                ngx.say("status:", res2.status, " response:", res2.body)
                ngx.say("time used:", ngx.now() - start_time)
            }
        }

        # 外部重定向
        location = /foo {
            content_by_lua_block {
                ngx.say([[I am foo]])
            }
        }

        location = / {
            rewrite_by_lua_block {
                return ngx.redirect('/foo');
            }
        }

    }

    server {
        listen  80;
        server_name  localhost;

        location /print_param {
            content_by_lua_block {
                local arg = ngx.req.get_uri_args()
                for k,v in pairs(arg) do
                    ngx.say("[GET ] key:", k, " v:", v)
                end

                ngx.req.read_body() -- 解析 body 参数之前一定要先读取 body
                local arg = ngx.req.get_post_args()
                for k,v in pairs(arg) do
                    ngx.say("[POST] key:", k, " v:", v)
                end
            }
        }

        # location /test {
        #     content_by_lua_block {
        #         local res = ngx.location.capture(
        #                 '/print_param',
        #                 {
        #                 method = ngx.HTTP_POST,
        #                 args = ngx.encode_args({a = 1, b = '2&'}),
        #                 body = ngx.encode_args({c = 3, d = '4&'})
        #             }
        #         )
        #         ngx.say(res.body)
        #     }
        # }

        # location /test {
        #     # 默认读取 body
        #     lua_need_request_body on;
        #     content_by_lua_block {
        #         local data = ngx.req.get_body_data()
        #         ngx.say("hello ", data)
        #     }
        # }
        location /test {
            content_by_lua_block {
                ngx.say("hello")
                ngx.sleep(3)
                ngx.say("the world")
            }
        }

        location /test2 {
            content_by_lua_block {
                ngx.say("hello")
                ngx.flush() -- 显式的向客户端刷新响应输出
                ngx.sleep(3)
                ngx.say("the world")
            }
        }

        location /test3 {
            content_by_lua_block {
                -- ngx.var.limit_rate = 1024*1024
                local file, err = io.open(ngx.config.prefix() .. "data.db","r")
                if not file then
                    ngx.log(ngx.ERR, "open file error:", err)
                    ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
                end

                local data
                while true do
                    data = file:read(1024)
                    if nil == data then
                        break
                    end
                    ngx.print(data)
                    ngx.flush(true)
                end
                file:close()
            }
        }

        location /test4 {
            content_by_lua_block {
                local table = {
                    "hello, ",
                    {"world: ", true, " or ", false,{": ",nil}}
                }
                ngx.print(table)
            }
        }
    
        location / {
            content_by_lua_block {
                local num = 55
                local str = "string"
                local obj
                ngx.log(ngx.ERR, "num:", num)
                ngx.log(ngx.INFO, " string:", str)
                print([[i am print]])
                ngx.log(ngx.ERR, " object:", obj)
            }
        }
    
    }

    
    
    server {
        listen  81;
        location / {
            log_by_lua_block {
                local logger = require "resty.logger.socket"
                if not logger.initted() then
                    local ok, err = logger.init{
                        host = 'xxx',
                        port = 1234,
                        flush_limit = 1234,
                        drop_limit = 5678,
                    }
                    if not ok then
                        ngx.log(ngx.ERR, "failed to initialize the logger: ",
                                err)
                        return
                    end
                end

                -- construct the custom access log message in
                -- the Lua variable "msg"

                local bytes, err = logger.log(msg)
                if err then
                    ngx.log(ngx.ERR, "failed to log message: ", err)
                    return
                end
            }
        }
    }

    server {
        listen 82;

        # 加法
        location /addition {
           content_by_lua_block {
                local args = ngx.req.get_uri_args()
                ngx.say(args.a + args.b)
            }
        }

        # 减法
        location /subtraction {
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                ngx.say(args.a - args.b)
            }
        }

        # 乘法
        location /multiplication {
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                ngx.say(args.a * args.b)
            }
        }

        # 除法
        location /division {
            content_by_lua_block {
                local args = ngx.req.get_uri_args()
                ngx.say(args.a / args.b)
            }
        }
    }



    # 進入/api/xxx 匹配lua文件 
    server {
        listen 83;

        # 在代码路径中使用nginx变量
        # 注意： nginx var 的变量一定要谨慎，否则将会带来非常大的风险
        location ~ ^/api/([-_a-zA-Z0-9/]+) {
            # 准入阶段完成参数验证
            access_by_lua_file  lua/access_check.lua;

            #内容生成阶段
            content_by_lua_file lua/$1.lua;
        }
    }

    # 屏蔽IP 訪問127.0.0.1 回應403
    server {
        listen 84;
        server_name localhost;

        location /sum {
            # 使用access阶段完成准入阶段处理
            access_by_lua_block {
                local black_ips = {["127.0.0.1"]=true}

                local ip = ngx.var.remote_addr
                print('test')
                print(ip)
                if true == black_ips[ip] then
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end
            }

            # 处理业务
            content_by_lua_block {
                    local a = tonumber(ngx.var.arg_a) or 0
                    local b = tonumber(ngx.var.arg_b) or 0
                    ngx.say("sum:", a + b )
                }
            }
    }

    # 子查詢
    server {
        listen 85;

        location /foo {
            content_by_lua_block {
                res = ngx.location.capture("/bar")
                ngx.print(res.body)
                ngx.say("foo")   
            }
        }

        location /bar {
            echo 'Bar';
        }

        location /blah {
            echo 'Success!';
        }

    }

    # 不同阶段共享变量
    server {
        listen 86;

        location /test {

            rewrite_by_lua_block {
                ngx.ctx.foo = 76
            }
            access_by_lua_block {
                ngx.ctx.foo = ngx.ctx.foo + 3
            }
            content_by_lua_block {
                ngx.say(ngx.ctx.foo)
            }
        }

         location /sub {
            content_by_lua_block {
                ngx.say("sub pre: ", ngx.ctx.blah)
                ngx.ctx.blah = 32
                ngx.say("sub post: ", ngx.ctx.blah)
            }
        }

        location /main {
            content_by_lua_block {
                ngx.ctx.blah = 73
                ngx.say("main pre: ", ngx.ctx.blah)
                local res = ngx.location.capture("/sub")
                ngx.print(res.body)
                ngx.say("main post: ", ngx.ctx.blah)
            }
        }
    }

  

    # 利用 proxy_pass
    server {

        listen 90;

        location /test {
            content_by_lua_block {
                ngx.req.read_body()
                local args, err = ngx.req.get_uri_args()

                local res = ngx.location.capture('/spe_md5',
                    {
                        method = ngx.HTTP_POST,
                        body = args.data
                    }
                )

                if 200 ~= res.status then
                    ngx.exit(res.status)
                end

                if args.key == res.body then
                    ngx.say("valid request")
                else
                    ngx.say("invalid request")
                end
            }
        }

        location /spe_md5 {
            proxy_pass http://md5_server;   
            #For HTTP, the proxy_http_version directive should be set to “1.1” and the “Connection” 
            #header field should be cleared.（from:http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive)
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
    }

    server {
        listen  91;         

        location /spe_md5 {
            content_by_lua_block {
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                ngx.print(ngx.md5(data .. "*&^%$#$^&kjtrKUYG"))

            }
        }
    }

    # 利用 cosocket
    server {
        listen    93;

        location /test {
            content_by_lua_block {
                ngx.req.read_body()
                local args, err = ngx.req.get_uri_args()

                local http = require "resty.http"   
                local httpc = http.new()
                local res, err = httpc:request_uri(
                    "http://127.0.0.1:94/spe_md5",
                        {
                        method = "POST",
                        body = args.data,
                      }
                )

                if 200 ~= res.status then
                    ngx.exit(res.status)
                end

                if args.key == res.body then
                    ngx.say("valid request")
                else
                    ngx.say("invalid request")
                end
            }
        }
    }

    server {
        listen    94;

        location /spe_md5 {
            content_by_lua_block {
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                ngx.print(ngx.md5(data .. "*&^%$#$^&kjtrKUYG"))
            }
        }
    }




       

    server {
        listen 95;

        location /test {

        content_by_lua_block {
            local redis = require "resty.redis"
            local red = redis:new()

            red:set_timeout(1000) -- 1 sec

            local ok, err = red:connect("127.0.0.1", 6379)
            if not ok then
                ngx.say("failed to connect: ", err)
                return
            end


            ok, err = red:set("dog", "an animal")
                if not ok then
                    ngx.say("failed to set dog: ", err)
                    return
            end
            

            ngx.say("set result: ", ok)

            -- 连接池大小是100个，并且设置最大的空闲时间是 10 秒
            local ok, err = red:set_keepalive(10000, 100)
            if not ok then
                ngx.say("failed to set keepalive: ", err)
                return
            end
            }
        }
    }

    server {
        listen 96;

        location /test {
            content_by_lua_block {
                local redis = require "resty.redis_iresty"
                local red = redis:new()

                local ok, err = red:set("dog", "an animal")
                if not ok then
                    ngx.say("failed to set dog: ", err)
                    return
                end

                ngx.say("set result: ", ok)
            }
        }
    }

    server {
        listen 97;

        location /mixed {
            set_by_lua_block $a {
                ngx.log(ngx.ERR, "set_by_lua*")
            }
            rewrite_by_lua_block {
                ngx.log(ngx.ERR, "rewrite_by_lua*")
            }
            access_by_lua_block {
                ngx.log(ngx.ERR, "access_by_lua*")
            }
            content_by_lua_block {
                ngx.log(ngx.ERR, "content_by_lua*")
            }
            header_filter_by_lua_block {
                ngx.log(ngx.ERR, "header_filter_by_lua*")
            }
            body_filter_by_lua_block {
                ngx.log(ngx.ERR, "body_filter_by_lua*")
            }
            log_by_lua_block {
                ngx.log(ngx.ERR, "log_by_lua*")
            }
        }

    }
    



    # 反向代理
    server {
        listen 8899;

        location / {
            proxy_pass https://127.0.0.1;
        }
    }

    

}




    

